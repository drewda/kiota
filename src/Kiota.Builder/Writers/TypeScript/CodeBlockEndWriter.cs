using System;
using Kiota.Builder.CodeDOM;
using Kiota.Builder.Extensions;

namespace Kiota.Builder.Writers.TypeScript;
public class CodeBlockEndWriter : BaseElementWriter<BlockEnd, TypeScriptConventionService>
{
    public CodeBlockEndWriter(TypeScriptConventionService conventionService) : base(conventionService)
    {
    }
    public override void WriteCodeElement(BlockEnd codeElement, LanguageWriter writer)
    {
        ArgumentNullException.ThrowIfNull(codeElement);
        ArgumentNullException.ThrowIfNull(writer);
        if (codeElement.Parent is CodeNamespace) return;
        if (codeElement.Parent is CodeEnum)
            WriteEnumEndBlock(codeElement, writer);
        else
            writer.CloseBlock();
        if (codeElement.Parent?.Parent is CodeNamespace)
            conventions.WriteAutoGeneratedEnd(writer);
    }

    private void WriteEnumEndBlock(BlockEnd codeElement, LanguageWriter writer)
    {
        ArgumentNullException.ThrowIfNull(codeElement);
        ArgumentNullException.ThrowIfNull(writer);
        ArgumentNullException.ThrowIfNull(codeElement.Parent);
        writer.DecreaseIndent();
        writer.WriteLine("}  as const;");
        var elementName = codeElement.Parent.Name.ToFirstCharacterUpperCase();
        var enumConstName = TypeScriptConventionService.GetEnumTypeConstName(elementName);
        writer.WriteLine($"export type {elementName} = keyof typeof {enumConstName};");
    }
}
